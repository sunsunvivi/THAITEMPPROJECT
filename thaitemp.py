# -*- coding: utf-8 -*-
"""THAITEMP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r4wQMNDC2Qj82TtoLz8YQm0aFns-jCok
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score

from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/Year 2 /2 24/Data sci/tmax-tmin.csv'
rainfall_file_path = '/content/drive/MyDrive/Year 2 /2 24/Data sci/spatial-rain-hii.csv'

data = pd.read_csv(file_path)
rainfall_data = pd.read_csv(rainfall_file_path)

data

rainfall_data

data['Tmax'] = pd.to_numeric(data['Tmax'], errors='coerce')
data['Tmin'] = pd.to_numeric(data['Tmin'], errors='coerce')

print("Missing values:\n", data.isna().sum())

data.dropna(inplace=True)

rainfall_data['AvgRain'] = pd.to_numeric(rainfall_data['AvgRain'], errors='coerce')
rainfall_data.dropna(subset=['AvgRain'], inplace=True)

data_merged = pd.merge(data, rainfall_data[['YEAR', 'MONTH', 'AvgRain']],
                        left_on=['Year', 'Month'], right_on=['YEAR', 'MONTH'], how='left')
data_merged.drop(columns=['YEAR', 'MONTH'], inplace=True)

data_merged['YearMonth'] = data_merged['Year'] * 100 + data_merged['Month']

sns.boxplot(data=data_merged[['Tmax', 'Tmin', 'AvgRain']])
plt.title("Outliers in Data")
plt.show()

def remove_outliers(df, column):
    Q1 = df[column].quantile(0.25)
    Q3 = df[column].quantile(0.75)
    IQR = Q3 - Q1
    lower_bound = Q1 - 1.5 * IQR
    upper_bound = Q3 + 1.5 * IQR
    return df[(df[column] >= lower_bound) & (df[column] <= upper_bound)]

for col in ['Tmax', 'Tmin', 'AvgRain']:
    data_merged = remove_outliers(data_merged, col)

data_merged['YearMonth'] = data_merged['Year'] * 100 + data_merged['Month']
X = data_merged[['YearMonth', 'Tmin', 'Month', 'AvgRain']]
y = data_merged['Tmax']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, shuffle=False)

data

rainfall_data

"""## Modeling"""

model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

"""## Evaluation"""

mse = mean_squared_error(y_test, y_pred=model.predict(X_test))
rmse = np.sqrt(mse)
mae = mean_absolute_error(y_test, y_pred=model.predict(X_test))
r2 = r2_score(y_test, y_pred=model.predict(X_test))

# แสดงผล
print(f"Mean Squared Error (MSE): {mse:.2f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
print(f"Mean Absolute Error (MAE): {mae:.2f}")
print(f"R² Score: {r2:.4f}")

"""## Deployment"""

future_year = 2026
future_months = pd.DataFrame({
    'YearMonth': [future_year * 100 + m for m in range(1, 13)],
    'Tmin': [data_merged['Tmin'].mean()] * 12,
    'Month': list(range(1, 13)),
    'AvgRain': [data_merged['AvgRain'].mean()] * 12
})
future_predictions = model.predict(future_months)

def classify_temperature(tmax, tmin, month):
    if tmax >= 40.0:
        return "อากาศร้อนจัด (Very Hot)"
    elif 35.0 <= tmax < 40.0:
        return "อากาศร้อน (Hot)"
    if month in [11, 12, 1, 2]:
        if tmin <= 7.9:
            return "อากาศหนาวจัด (Very Cold)"
        elif 8.0 <= tmin <= 15.9:
            return "อากาศหนาว (Cold)"
        elif 16.0 <= tmin <= 17.9:
            return "อากาศค่อนข้างหนาว (Moderately Cold)"
        elif 18.0 <= tmin <= 22.9:
            return "อากาศเย็น (Cool)"
    return "อากาศปกติ (Normal)"

future_results = future_months.copy()
future_results['Predicted_Tmax'] = future_predictions
future_results['Class'] = future_results.apply(
    lambda row: classify_temperature(row['Predicted_Tmax'], row['Tmin'], row['Month']), axis=1)

print("\nผลการพยากรณ์ Tmax และการจัดคลาสสำหรับปี 2026:\n")
print(future_results)